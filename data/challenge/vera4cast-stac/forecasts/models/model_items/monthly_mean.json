{
  "stac_version": "1.0.0",
  "stac_extensions": [
    "https://stac-extensions.github.io/table/v1.2.0/schema.json"
  ],
  "type": "Feature",
  "id": "monthly_mean",
  "bbox": [
    [
      -79.8441,
      37.3217,
      -79.8146,
      37.3217
    ]
  ],
  "geometry": {
    "type": "MultiPoint",
    "coordinates": [
      [-79.8372, 37.3032],
      [-79.8357, 37.3078],
      [-79.8159, 37.3129]
    ]
  },
  "properties": {
    "description": "\nmodel info: This model calculates a monthly mean from the historic data and assigns this as the mean prediction for any day within that month. The standard deviation of the observations for that month is given as the standard deviation of the forecast.\n\nSites: fcre, tubr, bvre\n\nVariables: Daily Air temperature, Daily Inflow discharge, Daily Water_temperature, Daily oxygen_concentration, Daily oxygen % sat, Daily Chlorophyll-a, Daily Secchi, Daily fluorescent dissolved organic matter, Daily Bloom_binary",
    "start_datetime": "2024-02-06",
    "end_datetime": "2024-05-30",
    "providers": [
      {
        "url": "pending",
        "name": "pending",
        "roles": [
          "producer",
          "processor",
          "licensor"
        ]
      },
      {
        "url": "https://www.ecoforecastprojectvt.org",
        "name": "Ecoforecast Challenge",
        "roles": [
          "host"
        ]
      }
    ],
    "license": "CC0-1.0",
    "keywords": [
      "Forecasting",
      "vera4cast",
      "Daily Air temperature",
      "Daily Inflow discharge",
      "Daily Water_temperature",
      "Daily oxygen_concentration",
      "Daily oxygen % sat",
      "Daily Chlorophyll-a",
      "Daily Secchi",
      "Daily fluorescent dissolved organic matter",
      "Daily Bloom_binary"
    ],
    "table:columns": [
      {
        "name": "site_id",
        "type": "string",
        "description": "For forecasts that are not on a spatial grid, use of a site dimension that maps to a more detailed geometry (points, polygons, etc.) is allowable. In general this would be documented in the external metadata (e.g., alook-up table that provides lon and lat)"
      },
      {
        "name": "reference_datetime",
        "type": "timestamp[us, tz=UTC]",
        "description": "datetime that the forecast was initiated (horizon = 0)"
      },
      {
        "name": "datetime",
        "type": "timestamp[us, tz=UTC]",
        "description": "datetime of the forecasted value (ISO 8601)"
      },
      {
        "name": "depth_m",
        "type": "double",
        "description": "depth (meters) in water column of prediction"
      },
      {
        "name": "family",
        "type": "string",
        "description": "For ensembles: “ensemble.” Default value if unspecified for probability distributions: Name of the statistical distribution associated with the reported statistics. The “sample” distribution is synonymous with “ensemble.”For summary statistics: “summary.”"
      },
      {
        "name": "parameter",
        "type": "string",
        "description": "ensemble member or distribution parameter"
      },
      {
        "name": "prediction",
        "type": "double",
        "description": "predicted value for variable"
      },
      {
        "name": "pub_datetime",
        "type": "timestamp[us, tz=UTC]",
        "description": "datetime that forecast was submitted"
      },
      {
        "name": "project_id",
        "type": "string",
        "description": "unique identifier for the forecast project"
      },
      {
        "name": "duration",
        "type": "string",
        "description": "temporal duration of forecast (hourly, daily, etc.); follows ISO 8601 duration convention"
      },
      {
        "name": "variable",
        "type": "string",
        "description": "name of forecasted variable"
      },
      {
        "name": "model_id",
        "type": "string",
        "description": "unique model identifier"
      },
      {
        "name": "reference_date",
        "type": "string",
        "description": "date that the forecast was initiated"
      }
    ]
  },
  "collection": "forecasts",
  "links": [
    {
      "rel": "collection",
      "href": "../collection.json",
      "type": "application/json",
      "title": "monthly_mean"
    },
    {
      "rel": "root",
      "href": "../../catalog.json",
      "type": "application/json",
      "title": "Forecast Catalog"
    },
    {
      "rel": "parent",
      "href": "../collection.json",
      "type": "application/json",
      "title": "monthly_mean"
    },
    {
      "rel": "self",
      "href": "monthly_mean.json",
      "type": "application/json",
      "title": "Model Forecast"
    },
    {
      "rel": "item",
      "href": "https://github.com/OlssonF/vera4cast/blob/main/R/MonthlyMeanModelFunction.R",
      "type": "text/html",
      "title": "Link for Model Code"
    }
  ],
  "assets": {
    "1": {
      "type": "application/json",
      "title": "Model Metadata",
      "href": "https://renc.osn.xsede.org/bio230121-bucket01/vera4cast/metadata/model_id/monthly_mean.json",
      "description": "Use `jsonlite::fromJSON()` to download the model metadata JSON file. This R code will return metadata provided during the model registration.\n      \n\n### R\n\n```{r}\n# Use code below\n\nmodel_metadata <- jsonlite::fromJSON(\"https://renc.osn.xsede.org/bio230121-bucket01/vera4cast/metadata/model_id/monthly_mean.json\")\n\n"
    },
    "2": {
      "type": "text/html",
      "title": "Link for Model Code",
      "href": "https://github.com/OlssonF/vera4cast/blob/main/R/MonthlyMeanModelFunction.R",
      "description": "The link to the model code provided by the model submission team"
    },
    "3": {
      "type": "application/x-parquet",
      "title": "Database Access for Daily Air temperature",
      "href": "s3://anonymous@bio230121-bucket01/vera4cast/forecasts/parquet/project_id=vera4cast/duration=P1D/variable=AirTemp_C_mean/model_id=monthly_mean?endpoint_override=renc.osn.xsede.org",
      "description": "Use `arrow` for remote access to the database. This R code will return results for this variable and model combination.\n\n### R\n\n```{r}\n# Use code below\n\nall_results <- arrow::open_dataset(\"s3://anonymous@bio230121-bucket01/vera4cast/forecasts/parquet/project_id=vera4cast/duration=P1D/variable=AirTemp_C_mean/model_id=monthly_mean?endpoint_override=renc.osn.xsede.org\")\ndf <- all_results |> dplyr::collect()\n\n```\n       \n\nYou can use dplyr operations before calling `dplyr::collect()` to `summarise`, `select` columns, and/or `filter` rows prior to pulling the data into a local `data.frame`. Reducing the data that is pulled locally will speed up the data download speed and reduce your memory usage.\n\n\n"
    },
    "4": {
      "type": "application/x-parquet",
      "title": "Database Access for Daily Inflow discharge",
      "href": "s3://anonymous@bio230121-bucket01/vera4cast/forecasts/parquet/project_id=vera4cast/duration=P1D/variable=Flow_cms_mean/model_id=monthly_mean?endpoint_override=renc.osn.xsede.org",
      "description": "Use `arrow` for remote access to the database. This R code will return results for this variable and model combination.\n\n### R\n\n```{r}\n# Use code below\n\nall_results <- arrow::open_dataset(\"s3://anonymous@bio230121-bucket01/vera4cast/forecasts/parquet/project_id=vera4cast/duration=P1D/variable=Flow_cms_mean/model_id=monthly_mean?endpoint_override=renc.osn.xsede.org\")\ndf <- all_results |> dplyr::collect()\n\n```\n       \n\nYou can use dplyr operations before calling `dplyr::collect()` to `summarise`, `select` columns, and/or `filter` rows prior to pulling the data into a local `data.frame`. Reducing the data that is pulled locally will speed up the data download speed and reduce your memory usage.\n\n\n"
    },
    "5": {
      "type": "application/x-parquet",
      "title": "Database Access for Daily Water_temperature",
      "href": "s3://anonymous@bio230121-bucket01/vera4cast/forecasts/parquet/project_id=vera4cast/duration=P1D/variable=Temp_C_mean/model_id=monthly_mean?endpoint_override=renc.osn.xsede.org",
      "description": "Use `arrow` for remote access to the database. This R code will return results for this variable and model combination.\n\n### R\n\n```{r}\n# Use code below\n\nall_results <- arrow::open_dataset(\"s3://anonymous@bio230121-bucket01/vera4cast/forecasts/parquet/project_id=vera4cast/duration=P1D/variable=Temp_C_mean/model_id=monthly_mean?endpoint_override=renc.osn.xsede.org\")\ndf <- all_results |> dplyr::collect()\n\n```\n       \n\nYou can use dplyr operations before calling `dplyr::collect()` to `summarise`, `select` columns, and/or `filter` rows prior to pulling the data into a local `data.frame`. Reducing the data that is pulled locally will speed up the data download speed and reduce your memory usage.\n\n\n"
    },
    "6": {
      "type": "application/x-parquet",
      "title": "Database Access for Daily oxygen_concentration",
      "href": "s3://anonymous@bio230121-bucket01/vera4cast/forecasts/parquet/project_id=vera4cast/duration=P1D/variable=DO_mgL_mean/model_id=monthly_mean?endpoint_override=renc.osn.xsede.org",
      "description": "Use `arrow` for remote access to the database. This R code will return results for this variable and model combination.\n\n### R\n\n```{r}\n# Use code below\n\nall_results <- arrow::open_dataset(\"s3://anonymous@bio230121-bucket01/vera4cast/forecasts/parquet/project_id=vera4cast/duration=P1D/variable=DO_mgL_mean/model_id=monthly_mean?endpoint_override=renc.osn.xsede.org\")\ndf <- all_results |> dplyr::collect()\n\n```\n       \n\nYou can use dplyr operations before calling `dplyr::collect()` to `summarise`, `select` columns, and/or `filter` rows prior to pulling the data into a local `data.frame`. Reducing the data that is pulled locally will speed up the data download speed and reduce your memory usage.\n\n\n"
    },
    "7": {
      "type": "application/x-parquet",
      "title": "Database Access for Daily oxygen % sat",
      "href": "s3://anonymous@bio230121-bucket01/vera4cast/forecasts/parquet/project_id=vera4cast/duration=P1D/variable=DOsat_percent_mean/model_id=monthly_mean?endpoint_override=renc.osn.xsede.org",
      "description": "Use `arrow` for remote access to the database. This R code will return results for this variable and model combination.\n\n### R\n\n```{r}\n# Use code below\n\nall_results <- arrow::open_dataset(\"s3://anonymous@bio230121-bucket01/vera4cast/forecasts/parquet/project_id=vera4cast/duration=P1D/variable=DOsat_percent_mean/model_id=monthly_mean?endpoint_override=renc.osn.xsede.org\")\ndf <- all_results |> dplyr::collect()\n\n```\n       \n\nYou can use dplyr operations before calling `dplyr::collect()` to `summarise`, `select` columns, and/or `filter` rows prior to pulling the data into a local `data.frame`. Reducing the data that is pulled locally will speed up the data download speed and reduce your memory usage.\n\n\n"
    },
    "8": {
      "type": "application/x-parquet",
      "title": "Database Access for Daily Chlorophyll-a",
      "href": "s3://anonymous@bio230121-bucket01/vera4cast/forecasts/parquet/project_id=vera4cast/duration=P1D/variable=Chla_ugL_mean/model_id=monthly_mean?endpoint_override=renc.osn.xsede.org",
      "description": "Use `arrow` for remote access to the database. This R code will return results for this variable and model combination.\n\n### R\n\n```{r}\n# Use code below\n\nall_results <- arrow::open_dataset(\"s3://anonymous@bio230121-bucket01/vera4cast/forecasts/parquet/project_id=vera4cast/duration=P1D/variable=Chla_ugL_mean/model_id=monthly_mean?endpoint_override=renc.osn.xsede.org\")\ndf <- all_results |> dplyr::collect()\n\n```\n       \n\nYou can use dplyr operations before calling `dplyr::collect()` to `summarise`, `select` columns, and/or `filter` rows prior to pulling the data into a local `data.frame`. Reducing the data that is pulled locally will speed up the data download speed and reduce your memory usage.\n\n\n"
    },
    "9": {
      "type": "application/x-parquet",
      "title": "Database Access for Daily Secchi",
      "href": "s3://anonymous@bio230121-bucket01/vera4cast/forecasts/parquet/project_id=vera4cast/duration=P1D/variable=Secchi_m_sample/model_id=monthly_mean?endpoint_override=renc.osn.xsede.org",
      "description": "Use `arrow` for remote access to the database. This R code will return results for this variable and model combination.\n\n### R\n\n```{r}\n# Use code below\n\nall_results <- arrow::open_dataset(\"s3://anonymous@bio230121-bucket01/vera4cast/forecasts/parquet/project_id=vera4cast/duration=P1D/variable=Secchi_m_sample/model_id=monthly_mean?endpoint_override=renc.osn.xsede.org\")\ndf <- all_results |> dplyr::collect()\n\n```\n       \n\nYou can use dplyr operations before calling `dplyr::collect()` to `summarise`, `select` columns, and/or `filter` rows prior to pulling the data into a local `data.frame`. Reducing the data that is pulled locally will speed up the data download speed and reduce your memory usage.\n\n\n"
    },
    "10": {
      "type": "application/x-parquet",
      "title": "Database Access for Daily fluorescent dissolved organic matter",
      "href": "s3://anonymous@bio230121-bucket01/vera4cast/forecasts/parquet/project_id=vera4cast/duration=P1D/variable=fDOM_QSU_mean/model_id=monthly_mean?endpoint_override=renc.osn.xsede.org",
      "description": "Use `arrow` for remote access to the database. This R code will return results for this variable and model combination.\n\n### R\n\n```{r}\n# Use code below\n\nall_results <- arrow::open_dataset(\"s3://anonymous@bio230121-bucket01/vera4cast/forecasts/parquet/project_id=vera4cast/duration=P1D/variable=fDOM_QSU_mean/model_id=monthly_mean?endpoint_override=renc.osn.xsede.org\")\ndf <- all_results |> dplyr::collect()\n\n```\n       \n\nYou can use dplyr operations before calling `dplyr::collect()` to `summarise`, `select` columns, and/or `filter` rows prior to pulling the data into a local `data.frame`. Reducing the data that is pulled locally will speed up the data download speed and reduce your memory usage.\n\n\n"
    },
    "11": {
      "type": "application/x-parquet",
      "title": "Database Access for Daily Bloom_binary",
      "href": "s3://anonymous@bio230121-bucket01/vera4cast/forecasts/parquet/project_id=vera4cast/duration=P1D/variable=Bloom_binary_mean/model_id=monthly_mean?endpoint_override=renc.osn.xsede.org",
      "description": "Use `arrow` for remote access to the database. This R code will return results for this variable and model combination.\n\n### R\n\n```{r}\n# Use code below\n\nall_results <- arrow::open_dataset(\"s3://anonymous@bio230121-bucket01/vera4cast/forecasts/parquet/project_id=vera4cast/duration=P1D/variable=Bloom_binary_mean/model_id=monthly_mean?endpoint_override=renc.osn.xsede.org\")\ndf <- all_results |> dplyr::collect()\n\n```\n       \n\nYou can use dplyr operations before calling `dplyr::collect()` to `summarise`, `select` columns, and/or `filter` rows prior to pulling the data into a local `data.frame`. Reducing the data that is pulled locally will speed up the data download speed and reduce your memory usage.\n\n\n"
    }
  }
}
